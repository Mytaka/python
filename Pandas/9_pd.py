import numpy as np
import pandas as pd

Indict_array = {'age': [53, 37, 11, 18, 7], 
                'паме': ['Сергей', 'Маша', 'Ксюша', 'Аристарх', 'Соня'], 
                'наличие авто': [True, True, False, True, False]}
df = pd.DataFrame(Indict_array)

df[ [True, False, True, False, True] ]  # вернеться тоько строки, где True
df[ df['наличие авто'] ]                # можно использовать сам столбец
df['age'] <= 11                         # вернет булевый список

# ~ - не
# & - и
# | - или 
# преоритеты их использования ~ & | (==; >; <; != и т.д.). Bсе что в скобках выполняется в первую очередь.

df[ (df['age']<=18) & df['наличие авто'] ]
df[ (df['age'] == 18) | ~ df['наличие авто'] ]
df.isin([53,'Соня'])                # возвращает булевый датафрейм с вписаными данными
df['age'].isin([53,'Соня'])         # возвращает булевый датафрейм с вписаными данными

# .query
# Логические операторы (not, and, or) и операторы сравнения (==, <, > != и тд) используются стандартно. 
# Преоритет: (==, <, > != и тд) -> not -> and -> ог Используются только названия столбцов. 
# Можно ссылаться на имена столбцов, которые не являются допустимыми именами переменных Python, заключив их в обратные метки.

df.query('not `наличие авто` and age < 10') # возвращает нужную строку
N = 5
df.query('not `наличие авто` and age < 3*@N') # перед переменной *@
N = 5
print(df)
print(df.query('not `наличие авто` and age < 3*@N'))

